type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/components/Seat.java
  visible: true
  text: |
    package cinema.components;


    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.Comparator;
    import java.util.UUID;

    public class Seat implements Comparator<Seat> {
        private int row;
        private int column;
        private int price;

        private UUID token;
        @JsonIgnore
        private boolean isBuying = false;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.token = UUID.randomUUID();
            countPrice();
        }

        public Seat(){
            isBuying = true;
        }


        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public void countPrice(){
            this.price = row > 4 ? 8 : 10;
        }

        @Override
        public int compare(Seat o1, Seat o2) {
            if (o1.getRow() - o2.getRow() != 0)
                return o1.getRow() - o2.getRow();
            else
                return o1.getColumn() - o2.getColumn();
        }

        @JsonIgnore

        public boolean isBuying() {
            return isBuying;
        }

        public void setBuying(boolean buying) {
            isBuying = buying;
        }

        @JsonIgnore
        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/config/UUIDConfig.java
  visible: true
  text: |+
    package cinema.config;


  learner_created: true
- name: src/cinema/exeptions/OutOfBoundsEx.java
  visible: true
  text: |
    package cinema.exeptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "The number of a row or a column is out of bounds!")
    public class OutOfBoundsEx extends RuntimeException{
        public OutOfBoundsEx() {
            super("The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
- name: src/cinema/components/Cinema.java
  visible: true
  text: |
    package cinema.components;


    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;

    import java.util.*;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    @JsonPropertyOrder({
            "total_rows",
            "total_columns",
            "available_seats"
    })
    public class Cinema {

        @JsonProperty("total_rows")
        private int totalRows;
        @JsonProperty("total_columns")
        private int totalColumns;
        @JsonProperty("available_seats")
        private List<Seat> availableSeats;

        public Cinema(int totalRows,int totalColumns){
            this.totalColumns = totalColumns;
            this.totalRows = totalRows;
            this.availableSeats = new ArrayList<>();
            generateSeats();
        }

        private void generateSeats(){
            for (int r = 1; r <= totalRows ; r++) {
                for (int c = 1; c <= totalColumns ; c++) {
                    availableSeats.add(new Seat(r,c));
                }
            }
        }


        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }

        public Seat buyTicket(Seat seat){
            seat.countPrice();
            availableSeats.set((seat.getRow() - 1) * totalRows + seat.getColumn() - 1,seat);
            availableSeats.get((seat.getRow() - 1) * totalRows + seat.getColumn() - 1).setToken(UUID.randomUUID());
            return  availableSeats.get((seat.getRow() - 1) * totalRows + seat.getColumn() - 1);
        }


        public Optional<Seat> findByToken(String uuid) throws NoSuchElementException{

            System.out.println("uuid");
            System.out.println(uuid);
            final String cmp = uuid.split(":")[1].replaceAll("\"","").replaceAll("}","");
            System.out.println("cmp");
            System.out.println(cmp);
            return availableSeats.stream().filter(el -> el.getToken().toString().equals(cmp)).findFirst();

        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;


    import cinema.components.Cinema;
    import cinema.components.Seat;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.NoSuchElementException;
    import java.util.UUID;

    @RestController
    public class CinemaController {

        private final Cinema cinema;

        public CinemaController() {
            this.cinema = new Cinema(9, 9);
        }


        @GetMapping("/seats")
        public Cinema getCinema() {
            return cinema;
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseSeat(@RequestBody Seat seat) {
            if ((seat.getRow() < 1
                    || seat.getColumn() < 1)
                    || (seat.getRow() > cinema.getTotalRows()
                    || seat.getColumn() > cinema.getTotalColumns())) {
                return new ResponseEntity<>(
                        """
                                {
                                  "error": "The number of a row or a column is out of bounds!"
                                }""",
                        HttpStatus.BAD_REQUEST);
            }
            Seat s = cinema.getAvailableSeats().get((seat.getRow() - 1) * cinema.getTotalRows() + seat.getColumn() - 1);

            if (s.isBuying()) {
                return new ResponseEntity<>(
                        """
                                {
                                  "error": "The ticket has been already purchased!"
                                }
                                """,
                        HttpStatus.BAD_REQUEST);
            }
            s = cinema.buyTicket(seat);

            return new ResponseEntity<>(
                    String.format(
                            "{\n\"token\": \"%s\",\n \"ticket\": {\n\"row\": %s,\n\"column\": %s,\n\"price\": %s\n}\n} ",
                            s.getToken(), s.getRow(), s.getColumn(), s.getPrice()),
                    HttpStatus.OK);
        }


        @PostMapping("/return")
        public ResponseEntity<?> returnSeat(@RequestBody String uuid) {


            Seat seat = cinema.findByToken(uuid).orElse(null);
            if (seat != null) {
                return new ResponseEntity<>(
                        String.format("{\n\t\"returned_ticket\": {\n\t \"row\": %s,\n \"column\": %s,\n \"price\": %s\n\t}\n}",
                                seat.getRow(), seat.getColumn(), seat.getPrice()), HttpStatus.OK);
            }else {
                return new ResponseEntity<>("{\n\t\"error\": \"Wrong token!\"\n}", HttpStatus.BAD_REQUEST);
            }
        }
    }
  learner_created: true
- name: src/cinema/exeptions/SeatNotAvailableException.java
  visible: true
  text: |
    package cinema.exeptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.server.ResponseStatusException;

    public class SeatNotAvailableException extends RuntimeException {
        public SeatNotAvailableException(){
            super("The ticket has been already purchased!");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Tue, 22 Nov 2022 23:29:59 UTC"
record: 4
